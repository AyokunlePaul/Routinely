// Generated by Dagger (https://dagger.dev).
package com.ayokunlepaul.core.factories;

import com.ayokunlepaul.core.base.BaseViewModel;
import dagger.internal.Factory;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RoutinelyViewModelFactory_Factory implements Factory<RoutinelyViewModelFactory> {
  private final Provider<Map<Class<? extends BaseViewModel>, Provider<BaseViewModel>>> creatorsProvider;

  public RoutinelyViewModelFactory_Factory(
      Provider<Map<Class<? extends BaseViewModel>, Provider<BaseViewModel>>> creatorsProvider) {
    this.creatorsProvider = creatorsProvider;
  }

  @Override
  public RoutinelyViewModelFactory get() {
    return new RoutinelyViewModelFactory(creatorsProvider.get());
  }

  public static RoutinelyViewModelFactory_Factory create(
      Provider<Map<Class<? extends BaseViewModel>, Provider<BaseViewModel>>> creatorsProvider) {
    return new RoutinelyViewModelFactory_Factory(creatorsProvider);
  }

  public static RoutinelyViewModelFactory newInstance(
      Map<Class<? extends BaseViewModel>, Provider<BaseViewModel>> creators) {
    return new RoutinelyViewModelFactory(creators);
  }
}
